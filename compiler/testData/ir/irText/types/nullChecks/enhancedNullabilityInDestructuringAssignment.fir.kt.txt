fun use(x: Any, y: Any) {
}

class P {
  constructor(x: Int, y: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val x: Int
    field = x
    get

  val y: Int
    field = y
    get

  operator fun component1(): Int {
    return <this>.<get-x>()
  }

  operator fun component2(): Int {
    return <this>.<get-y>()
  }

}

class Q<T1 : Any?, T2 : Any?> {
  constructor(x: T1, y: T2) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val x: T1
    field = x
    get

  val y: T2
    field = y
    get

  operator fun component1(): T1 {
    return <this>.<get-x>()
  }

  operator fun component2(): T2 {
    return <this>.<get-y>()
  }

}

fun test1() {
  val <destruct>: P = notNullP() /*!! P */
  val x: Int = <destruct>.component1()
  val y: Int = <destruct>.component2()
  use(x = x, y = y)
}

fun test2() {
  val <destruct>: @FlexibleNullability Q<@EnhancedNullability @NotNull String, @EnhancedNullability @NotNull String>? = notNullComponents()
  val x: @EnhancedNullability @NotNull String = <destruct>.component1() /*!! @NotNull String */
  val y: @EnhancedNullability @NotNull String = <destruct>.component2() /*!! @NotNull String */
  use(x = x, y = y)
}

fun test2Desugared() {
  val tmp: @FlexibleNullability Q<@EnhancedNullability @NotNull String, @EnhancedNullability @NotNull String>? = notNullComponents()
  val x: @NotNull String = tmp.component1() /*!! @NotNull String */
  val y: @NotNull String = tmp.component2() /*!! @NotNull String */
  use(x = x, y = y)
}

fun test3() {
  val <destruct>: Q<@EnhancedNullability @NotNull String, @EnhancedNullability @NotNull String> = notNullQAndComponents() /*!! Q<@EnhancedNullability @NotNull String, @EnhancedNullability @NotNull String> */
  val x: @EnhancedNullability @NotNull String = <destruct>.component1() /*!! @NotNull String */
  val y: @EnhancedNullability @NotNull String = <destruct>.component2() /*!! @NotNull String */
  use(x = x, y = y)
}

fun test4() {
  val <destruct>: IndexedValue<@EnhancedNullability @NotNull P> = listOfNotNull() /*!! @FlexibleMutability MutableList<@EnhancedNullability @NotNull P> */.withIndex<@EnhancedNullability @NotNull P>().first<IndexedValue<@EnhancedNullability @NotNull P>>()
  val x: Int = <destruct>.component1()
  val y: @EnhancedNullability @NotNull P = <destruct>.component2() /*!! @NotNull P */
  use(x = x, y = y)
}

