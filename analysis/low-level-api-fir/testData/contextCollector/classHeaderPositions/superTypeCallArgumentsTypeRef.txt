Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirDefaultSimpleImportingScope
    Element 2
        Scope: FirExplicitStarImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirDefaultSimpleImportingScope
    Element 5
        Scope: FirPackageMemberScope
    Element 6
        Scope: FirExplicitSimpleImportingScope
    Element 7
        Scope: FirNestedClassifierScopeWithSubstitution
            Classifiers:
                FirRegularClassSymbol public final class Nested : R|kotlin/Any|
        Static scope owner symbol: FirRegularClassSymbol public open class Base : R|kotlin/Any|
    Element 8
        Scope: FirLocalScope
            Properties:
                FirValueParameterSymbol primaryConstructorParameter: R|test/Base.Nested|

FILE: [ResolvedTo(IMPORTS)] superTypeCallArgumentsTypeRef.kt
    public open [ResolvedTo(STATUS)] class Base : R|kotlin/Any| {
        public [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] param: R|test/Base.Nested|): R|test/Base| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] class Nested : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor(): R|test/Base.Nested| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }
    public final [ResolvedTo(CONTRACTS)] fun <[ResolvedTo(CONTRACTS)] T> materialize(): R|T| {
        ^materialize TODO#()
    }
    public final [ResolvedTo(STATUS)] class Child : R|test/Base| {
        public [ResolvedTo(BODY_RESOLVE)] constructor([ResolvedTo(BODY_RESOLVE)] primaryConstructorParameter: R|test/Base.Nested|): R|test/Child| {
            super<R|test/Base|>(R|test/materialize|<R|test/Base.Nested|>())
        }

    }